            # The Principle of Computer Composition #

> 计算机系统简介
    - 计算机软硬件概念
        - 计算机系统
            - 硬件 计算机的实体, 如主机, 外设等
            - 软件 由具有各类特殊功能的信息(程序)组成
                - 系统软件 管理整个计算机系统
                    - 操作系统
                    - 语言处理程序 (编译器)
                    - 服务性程序 (并行程序)
                    - 网络软件
                    - 数据库管理系统
                - 应用软件 按任务需要编制成的各类程序 

    - 计算机系统的层次结构
        > 系统抽象层次 
            - 应用软件
            - 操作系统
            - 架构层
            - 微体系结构层  (课程重点)
            - 逻辑层        (课程重点)
            - 数字电路层
            - 模拟电路层
            - 设备层
            - 物理层
        > 指令抽象层次
            - 高级语言    利用编译器编译成汇编语言
            - 汇编语言    指令对应机器码
            - 操作系统    
            - 机器语言    计算机实际执行指令
            - 微指令系统  取地址, 译码等指令

    ▲ 计算机组成结构
        > 冯.诺伊曼架构 
            ▲ 五大组成部分 运算器, 存储器, 控制器, 输入设备, 输出设备
                - 以运算器为中心架构的计算机
                - 具有存储程序特征的都是冯.诺伊曼架构计算机
            - 指令和数据以同等地位存在存储器中, 可按地址寻访
            - 指令和数据用二进制表示
            - 指令由操作码和地址码组成
            > 改进架构 以存储器为中心的计算机结构
            > 继续改进 现代计算机硬件架构 (主机 + IO设备)
                - 主机
                    - CPU 运算器(ALU)和控制器(CU)
                    - 存储器 主存和辅存
                - IO设备
                    - 输入设备
                    - 输出设备
    
    - 计算机的工作步骤
        - 需要解决的问题必须是计算机可以计算的问题
        - 前期准备
            - 建立数学模型
            - 确定计算方法
            - 编写解题程序
        > 存储器
            > 基本构成 存储体 + MAR + MDR
            - 存储器  存储体, 存储单元, 存储元件(大楼, 房间, 床位)
                - 存储单元  存放一串二进制代码, 按地址寻访
                - 存储字    存储单元中二进制代码的组合
                - 存储字长  存储单元中二进制代码的位数
            - MAR  存储器地址寄存器, 反映存储单元个数即地址码长度 (Memory Address Register)
            - MDR  存储器数据寄存器, 反映存储字长 (Memory Digital Register)
            - 可以想象成 MAR 为长宽, MDR 为高
        > 运算器
            > 计算机运算基础
                - 原码 -> 补码 = 原码~反码 + 1
                - 补码 -> 原码 = 补码~原码 + 1
            > 结构
                - 要掌握运算过程中各部件作用
                -  ______________________
                - |                      |
                - |  ACC <--------> MQ   |
                - |   |\                 |
                - |   |                  |
                - |  \|                  |
                - |  ALU                 |
                - |  /|\                 |
                - |   |                  |          
                - |   X                  |
                - |______________________|
                -
                -        ACC      MQ        X
                - ---------------------------------
                -  加法  被加数              加数       (数据所保存在的单元)
                -        和
                -  减法  被减数              减数
                -        差  
                -  乘法  乘积高位  乘数      被乘数
                -                 乘积低位
                -  除法  被除数    商        除数
                -        余数   
                - ---------------------------------
                - MQ 亦称为乘除寄存器
                - 运算指令格式为 指令|数据地址
        > 控制器
            - 执行加减乘除需要用到多条有顺序的运算指令, 管理这些指令执行的部件就是 控制器
            - 功能 解释指令, 保证指令执行秩序
            - 控制器组成  CU + IR + PC
            > 完成一条指令的逻辑顺序
                - 取指令    将内存单元中保存的指令取出, 送入到控制器中
                    - PC (Program Counter) 存放当前欲执行指令的地址, 具有计数功能, 取出指令后 +1 准备下一条指令.
                - 分析指令  将操作码部分送入控制单元分析
                    - IR (Instruction Register) 存放当前欲执行的指令
                - 执行指令  由控制单元控制相应的部件执行指令
                    > CU (Control Units) 控制单元
        > 主机
            - 运算器, 控制器, 存储器构成了计算机的主机
                > CPU 
                    - 运算器  ACC, MQ, ALU, X
                    - 控制器  PC, IR, CU
                - 存储器  存储体, MAR, MDR
                - IO设备 
            > 指令执行全过程 (以取数指令为例)
                - PC 取出指令地址, 送入 MAR
                - MAR 传递指令地址, 送入 存储体
                - 存储体 将具体指令取出, 送入 MDR
                - MDR 将指令送入 IR 
                > 取指令步骤到此完成
                - IR 将指令操作码部分送入 CU
                - IR 将指令数据地址部分送入 MAR
                - MAR 传递数据地址, 送入存储体
                - 存储体 将具体数据取出, 送入 MDR
                - MDR 将数据送入 ACC 
                > 至此, 取数指令执行完毕
            > 指令执行全过程 (以存数指令为例)
                - 取指令步骤与上述一致
                - IR 将指令数据地址部分送入 MAR
                - MAR 传递数据地址, 送入存储体
                - MDR 根据指令到 ACC 中取回数据
                - MDR 将数据存入 存储体 中
        > 硬件性能指标
            - 机器字长  
                - CPU 一次能处理数据的位数, 与 CPU 中的寄存器位数有关
                - 机器字长越长, 性能越好
            - 运算速度
                - 运算速度取决于机器执行指令的速度
                - 主频  并不是机器速度的直接指标
                - 核数  每个核支持的线程数, 也不是机器速度的直接指标
                > CPU 时间 = 时钟周期 / 主频  (1GHz = 1 * 10^9)
                > 指令测量指标
                    > 吉普森法 
                        - Tm = 累加(n, i=1) fi x ti
                        - fi 某个指令出现的频率
                        - ti 某个指令执行的时间
                    > CPI    执行一条指令所需时钟周期数 (Cycle Per Instruction)
                        > CPI = ( A.指令所占比例 * A.指令数 * A.CPI + B ..) / A..B.指令总数 
                    > IPC    一个时钟周期执行的指令数量
                    > MIPS   每秒执行百万条指令 = 主频 / CPI
                    > FLOPS  每秒浮点运算次数
            - 存储容量
                - 主存容量
                    - 衡量指标
                        - 存储单元个数 x 存储字长 (MAR = 10, MAD = 8, S = 1K x 8 = 8K)
                        - 字节数 (2^13 b = 1 KB)
                - 副存容量
> 计算机的发展史
    - 略

> 总线 (Bus)
    - 总线的基础概念
        > 连接方式
            - 分散连接  各部件之间使用单独连线
                - 早期大多数采用分散连接, 以运算器为中心, 会严重影响运算器效率
            - 总线连接  各部件连接到一组公共信息传输线上
                - 以 CPU 为核心的单总线架构
                - 以 CPU 为核心的双总线架构
                - 以 存储器 为核心的双总线架构
        
    > 总线的分类
        - 片内总线  芯片内部的总线
        > 系统总线  计算机各部件之间的信息传输线
            - 数据总线  双向传输数据  与机器字长、存储字长有关  
            - 地址总线  单向传输地址  与存储地址、IO地址有关
            - 控制总线  双向对系统内部各部件传输控制信号
        - 通信总线 用于计算机系统之间或与其他系统(如控制仪表, 移动通信等)之间的通信
            - 串行传输总线
            - 并行传输总线
    
    > 总线特性及其性能标准
        - 总线的物理实现  总线电路印刷在电路板(主板)上, 其他部件可以进行插拔式组合
        - 特性  
            - 机械特性  尺寸, 形状, 管脚数及排列顺序
            - 电气特性  传输方向和有效的电平范围
            - 功能特性  每根传输线的功能：地址信号, 数据信号, 控制信号
            - 时间特性  信号的时序关系
        > 性能指标
            - 总线宽度       数据线的根数
            - 标准传输率     每秒传输的最大字节数 (MBps)
            - 时钟同步/异步  同步, 不同步
            - 总线复用       地址线与数据线复用 (如8086芯片)
            - 信号线数       地址线、数据线和控制线的总和
            - 总线控制方式   突发、自动、仲裁、逻辑、计数
            - 其他指标       负载能力(如挂载的IO设备数量)

    > 总线标准
        - 略

    > 总线结构
        - 略
    
    ▲ 总线控制
        ▲ 总线判优控制
            - 主设备(模块)  对总线有控制权
            - 从设备(模块)  响应从主设备发来的总线命令
            > 控制方式
                - 集中式  即放在单一部件中, 如链式查询, 计数器定时查询, 独立请求方式 
                - 分布式  分布到各个设备
            > 链式查询
                - 多用于微型计算机中
                - BG 以链式顺序连接 IO 接口
                - 
                -        ↑↑↓↓         ↑↑↓↓                 ↑↑↓↓         (竖直传输方向)
                -  总  ____________________________________________      数据线
                -  线  ______|____________|____________________|___      地址线
                -  控  _____||___________||___________________||___      BS (总线忙)
                -  制  ____|||__________|||__________________|||___      BR (总线请求)
                -  部     ||||         ||||                 ||||
                -  件    IO 设备0     IO 设备1      ...    IO 设备n
                -   |    ↑|   |↓     ↑|   |↓              ↑|   |↓      
                -    -->--     ---->---    ------>----->----    --->     BG (总线同意)
                - 
                > 总线控制方式
                    - 当有 IO 设备通过 BR 发出总线占用信号, 如设备 1 和设备 n 同时发出 BR 信号
                    - BG 总线按顺序依次查询, 最先查询到的设备获得使用权, 即设备 1 将被先检查到并同意占用总线
                    - 设备 1 通过 BS 发出总线忙信号阻止其他设备使用总线
                > 优点  
                    - 结构简单
                    - 增加设备方便
                    - 进行可靠性设计时相对容易
                > 缺点  
                    - 链式查询方式对电路故障敏感, 尤其是 BG 总线, 若 BG 总线某段出现故障, 会导致后续设备无法获得总线使用权
                    - 设备 n 由于优先级低, 可能会永远无法获得总线使用权
            > 计数器定时查询方式
                - 相对于链式查询方式, 在总线中增加了一条 设备地址线
                - 
                -        ↑↑↓↓↓        ↑↑↓↓↓               ↑↑↓↓↓         (竖直传输方向)
                -  总  ____________________________________________      数据线
                -  线  _______|____________|____________________|__      地址线
                -  控  ______||___________||___________________||__      设备地址
                -  制  _____|||__________|||__________________|||__      BS (总线忙)
                -  部  ____||||_________||||_________________||||__      BR (总线请求)
                -  件     |||||        |||||                |||||
                -        IO 设备0     IO 设备1      ...    IO 设备n
                > 控制方式
                    - 设备通过 BR 发出总线占用信号, 如设备 1 和 设备 n 发出占用信号
                    - 总线控制部件启动计数器计数, 若此时计数器为 0 则通过 设备地址线 发出信号查询设备 0 
                    - 设备 0 没有发送占用信号, 则计数器 + 1, 往下查询设备 1
                    - 设备 1 被同意使用总线, 设备 1 发出 BS 占用总线信号
                > 优点  
                    - 确定优先级非常灵活, 因为计数器可以由不同策略确定
            > 独立请求方式
                - 随机访问策略 (上述两种方式都是顺序访问策略)
                - 
                -          ↓↓↓          ↓↓↓                  ↓↓↓         (竖直传输方向)
                -      ____________________________________________      数据线
                -  总  _____|______________|____________________|__      地址线
                -  线  ____||_____________||__________________ ||        BG(n) 
                -  控  <---||-------------||----------------- |||        BR(n)
                -  制  ____||____________ ||                 ||||        BG(1)
                -  部  <---||----------- |||                 ||||        BR(1)
                -  件  ___ ||           ||||                 ||||        BG(0)
                -      <- |||           ||||                 ||||        BR(0)
                -        ||||           ||||                 ||||   
                -      IO 设备0        IO 设备1      ...    IO 设备n   
                - 
                - 由各设备直接通过各自总线发出占用信号, 控制部件直接通过 BG 反馈占用结果
                - 控制部件内部可能会接收到多个信号, 所以需要额外内置一个 排队器 进行优先级控制
                - 可以通过 排队器 灵活设置设备的优先级或其他策略
        ▲ 总线通信控制
            - 从设备或得总线使用权后, 开始与主设备进行信息交换, 该过程便需要通信控制, 以解决通信双方协调配合问题
            - 总线传输周期  主从设备之间完成一次完整通信所需要的时间
                - 申请分配阶段  主模块申请, 总线仲裁决定
                - 寻址阶段      主模块向从模块给出地址和命令
                - 传数阶段      主模块和从模块交换数据
                - 结束阶段      主从模块撤销相关信息
            - 总线通信方式
                > 同步通信    由统一时标控制数据传送
                    - 同步式数据输入
                        - 
                        -           |<--   Bus Transfer Period   -->|           4个时钟周期
                        -            ___     ___     ___     ___     ___
                        - __________|   |___|   |___|   |___|   |___|   |___    时钟
                        -            
                        - ——————————<===============================>———————    地址
                        - ______________                    ________________    
                        -               \__________________/                    读命令
                        -
                        - —————————————————————————<========>———————————————    数据
                        -
                        > 同步方式必须要有等长的时钟周期来控制数据传输
                        > 在指定的时间点必须完成某些操作 (如读写处理)
                    - 同步式数据输出
                        - 
                        -           |<--   Bus Transfer Period   -->|           4个时钟周期
                        -            ___     ___     ___     ___     ___
                        - __________|   |___|   |___|   |___|   |___|   |___    时钟
                        -            
                        - ——————————<===============================>———————    地址
                        -             
                        - ——————————————<===================>———————————————    数据
                        - _________________                  _______________    
                        -                  \________________/                   写命令
                        -
                        > 同步数据输出的方式使主从模块强制同步
                        > 对于多个速度不同的模块, 只能选择速度最慢的模块以控制多设备之间的数据同步
                        > 多用于总线长度较短的机器
                - 异步通信  采用应答方式, 没有公共时钟标准, 核心是 请求 和 应答 动作
                    - 不互锁  通讯方式不可靠
                        - 主设备发出通讯请求, 从设备接收请求信号后发出应答信号
                        - 主设备在信号有效期过后撤销请求信号, 不管从设备是否收到请求信号
                        - 从设备在信号有效期过后也会撤销应答信号, 不管主设备是否收到应答信号
                    - 半互锁  有可能导致主设备信号一直处于高电平状态  
                        - 主设备发出通讯请求, 从设备接收后发出应答信号
                        - 主设备收到应答信号后才撤销请求, 否则会继续保持该请求信号
                        - 从设备在信号有效期过后撤销应答信号, 不管主设备是否收到应答信号
                    - 全互锁  可靠通讯方式
                        - 主设备发出通讯请求, 从设备接收后发出应答信号
                        - 主设备收到应答信号后才撤销请求, 否则会继续保持该请求信号
                        - 主设备撤销请求信号后, 发出已收到信号到从设备
                        - 从设备在确认主设备已经撤销信号后, 再撤销应答信号
                - 半同步通信  同步, 异步结合
                    - 同步  发送方用系统时钟前沿发送信号, 接收方用系统时钟后沿判断/识别(与同步通信方式一致)
                    - 异步  允许不同速度的模块和谐工作, 增加一条 等待响应信号(WAIT)
                    - 在半同步通信中读取输入数据
                        - 若从设备在 T3 周期到来时因速度慢无法提供数据, 则发出 WAIT 信号
                        - 主设备发现 WAIT 信号则在此周期不读取数据, 直至发现 WAIT 信号取消
                - 分离式通信  
                    - 上述三种通信方式, 在从模块准备数据时, 总线处于空闲状态
                    - 分离式通信则可以充分挖掘系统总线每个瞬间的潜力
                    > 基本思想  将一个传输周期分解为两个子周期
                        - 子周期一  模块 A 向总线发送命令、地址及其他信息, 发送完毕后放弃总线使用权
                        - 子周期二  模块 B 从总线接收相关命令信号后, 准备好数据, 然后申请总线使用权, 发送数据
                        > 在这种模式下, 每个模块的传输都只有单向传输的信息流, 每个模块都变成了主模块
                    > 特点
                        - 各模块均有权申请占用总线
                        - 采用同步方式通信, 不等待对方应答
                        - 各模块准备数据时无需占用总线
                        - 总线被占用时无空闲浪费

> 存储器
    - 计算机系统中的记忆设备, 存放程序和数据
    > 种类繁多, 主要关注三种分类方式
        - 按存储介质分类
            - 半导体存储器  TTL(集成度低, 速度快) MOS(集成度高, 制造简单, 功效小, 现代计算机主要应用)
            - 磁表面存储器  在金属或塑料表层涂磁表面层作为记忆介质
            - 磁芯存储器    曾经大大提高了计算机系统速度, 作为内存使用, 由华裔科学家王安博士于1948年发明
            - 光盘存储器    由激光, 磁光材料构成
            > 实际上这些种类只有 半导体 和 磁性 两种材料；半导体易失, 后三种不易失
        - 按存取方式分类
            - 存取时间与物理地址无关 (随机访问)
                - 随机存储器  (Random Access Memory RAM) 在程序执行中可读可写, 计算机主存都采用这种
                - 只读存储器  (Read Only Memory ROM)  
            - 存取时间与物理地址有关 (串行访问)
                - 顺序存取存储器  磁带
                - 直接存取存储器  磁盘
        - 按作用分类
            - 主存储器  
                - RAM(随机访问存储器)  保存用户数据  分为静态 RAM, 动态 RAM
                - ROM(只读存储器)  保存系统程序, 系统数据等不可修改的内容
                    - 分类 MROM, PROM, EPROM, EEPROM
            - Flash Memory  
                - 比磁盘要快, 比主存要慢, 如 U盘
                - 可充当追求性能的计算机硬盘或充当
                - 可充当主存与辅存中间的缓冲存储器, 如目前的 SSD
            - 高速缓冲存储器 Cache
                - 介于 CPU 与主存之间, 使用静态 RAM 制作
                - 速度快于 Flash Memory 和 主存
            - 辅助存储器  磁盘, 磁带, 光盘等速度比较慢
    
    - 存储器的层次结构
        > 存储器三个主要性能指标  速度, 容量, 位价
            > 由上往下, 位价越来越低, 速度越来越慢, 容量越来越大, CPU 访问的频度越来越少
            - 寄存器  通常嵌于 CPU 内部参与运算
            - 缓存    匹配 CPU 和 主存 之间的速度差异, 现代计算机也会将缓存嵌于 CPU 内
            - 主存    保存将要参与运行的程序和数据, 速度与 CPU 差距较大
            - 磁盘    辅存, 不可直接与 CPU 交换数据, 只能对接主存
            - 光盘    辅存, 不可直接与 CPU 交换数据, 只能对接主存
            - 磁带    辅存, 不可直接与 CPU 交换数据, 只能对接主存
        ▲ 缓存-主存层次 与 主存-辅存层次
            -           缓存(20ns)
            - CPU <==============> 主存 <====> 辅存
            - (10ns)             (200ns)      (ms)    (比例时间, 非实际时间)

    ▲ 主存储器
        - 主存基本构成
            -  __________          __________          _______
            - |          |<——————>|          |        |       |
            - |  Memory  |        |   Read   |<——————>|   M   |  Data Bus
            - |  Body    |<——————>|  Write   |        |   D   |<===========>
            - |__________|        | Circuits |<——————>|   R   |
            -    ^   ^            |__________|        |_______|     
            -  __|___|__             ^   ^
            - |         |         ___|___|____
            - | Drivers |        |            |
            - |_________|        |  Control   |<-------- Read
            -    ^   ^           |  Circuits  |<-------- Write
            -  __|___|__         |____________|
            - |         |                       
            - | Decoder |           
            - |_________|
            -    ^   ^
            -  __|___|__  
            - |         |  
            - | M  A  R |<====== Address Bus
            - |_________|
            -
        - 主存与 CPU 的联系
            -  __________                  __________
            - |          |    Data Bus    |          |
            - |   MDR <==|===============>|          |
            - |          |                |          |
            - |          |     Read       |          |
            - |          |--------------->|          |
            - |   CPU    |     Write      |   Main   |
            - |          |--------------->|  Memory  |
            - |          |                |          |
            - |          |  Address Bus   |          |
            - |   MAR ===|===============>|          |
            - |__________|                |__________|
            - 
        > 主存中存储单元地址的分配
            - 如存储 12345678
            - 高位字节地址为字地址
                - 0 | 12 | 34 | 56 | 78 |
                - 4 |    |    |    |    |
                - 8 |    |    |    |    |   大端/大尾方式
            - 低位字节地址为字地址
                - 0 | 78 | 56 | 34 | 12 |
                - 4 |    |    |    |    |
                - 8 |    |    |    |    |   小端/小尾方式
        > 主存的技术指标
            - 存储容量  主存存放二进制代码的总位数
            - 存储速度
                - 存储时间  
                    - 存储器的访问时间读出时间
                    - 分为 读出时间 和 写入时间
                - 存储周期
                    - 连续两次独立的存储操作(读或写)所需的最小间隔时间
                    - 分为  读周期 和 写周期
            - 存储器的带宽  位/秒
        > 半导体芯片简介
            - 基本结构
                -    Address Wire   _____________________________________________    Data Wire
                -  --------------->|  _________    __________    ______________  |<------------->
                -  --------------->| |         |  |          |  |              | |<------------->
                -       ... ...    | | Decoder |  |  Memory  |  |  Read/Write  | |    ... ...
                -  --------------->| | Drivers |  |  Metrix  |  |   Circuits   | |<------------->
                -  --------------->| |_________|  |__________|  |______________| |<------------->
                -  ———————————————>|_____________________________________________|<——————————————
                -      片选线                                                         读写控制线
                - 
                > 地址线单向, 数据线双向 
                    > 地址线 10 & 数据线 4 = 芯片容量 2^10 * 4 =  2K * 4 (bit)
                    > 地址线 14 & 数据线 1 = 芯片容量 2^14 * 1 = 16K * 1 (bit)
                    > 地址线 13 & 数据线 8 = 芯片容量 2^13 * 8 =  8K * 8 (bit)
                ▲ 片选线  确定访问存储器时数据在哪一个芯片或片区
                    - 若线中电平信号为低电平, 则说明数据存储在本存储矩阵中
                    - CS (Chip Select) 芯片选择信号
                    - CE (Chip Enable) 芯片使能信号
                    ▲ 片选线作用
                        - 用 16K x 1 位的存储芯片组成 64K x 8 位的存储器
                        -                 _____
                        -               _|___  |     2^14 = 16384 = 16 K
                        -             _|___  |_|     2^16 = 65536 = 64 K
                        -           _|___  |_|       
                        -         _|___  |_|
                        -       _|___  |_|
                        -     _|___  |_|    x 8  每个芯片 1 位排列 8 个芯片满足 8 位
                        -   _|___  |_|
                        -  |     |_|
                        -  |_____|
                        - 
                        -    x 4  每组芯片 16K 阵列 4 个芯片组满足 64K
                        -  
                        > 每个芯片以片选线连接在一起组成存储器
                        > CPU 可将 0 ~ 16K-1 的地址分配到第 1 组芯片中, 16K ~ 32K-1 分配到第 2 组芯片 ..
                > 读写控制线
                    - 单线控制时(低电平写/高电平读) 电平信号为 WE (Write Enable) 可写
                    - 双线控制
                        - 第一根电平信号为 OE (Output Enable) 低电平允许读
                        - 第二根电平信号为 WE (Write Enable) 低电平允许写
            - 译码驱动方式
                - 线选法
                    - 
                    -      Address Decoder 
                    -            __
                    -   A1      |  |——————+——————————————+
                    - --------->|  |      ▩              ▩    
                    -   A2      |  |    (0,0)   ...   (0,7)
                    - --------->|  |    
                    -           |  |——————+——————————————+
                    -   ...     |  |      ▩              ▩
                    -           |  |    (1,0)   ...   (1,7)
                    -   An-1    |  |    
                    - --------->|  |    
                    -   An      |  |         ... ...           16 x 8 矩阵
                    - --------->|  |    
                    -           |  |——————+——————————————+
                    -           |__|      ▩              ▩
                    -                   (15,0)    ...   (15,7)
                    -                     |              |
                    -                     |              | 
                    -                Read/Write Control Circuits 
                    - 
                    - 芯片阵列中单个芯片由一根片选线连接
                    - 假设信号为 00..00, 则第一根片选线输出信号, 芯片 (0,0) 到 (0,7) 输出数据到读写电路
                    > 缺点  
                        - 若 n = 20, 则地址译码器译码后地址为 2^20 (1048576), 所需片选线太密集
                        - 故该种布线方式不适用于容量大的存储器
                - 重合法
                    - 
                    -      Address Decoder 
                    -            __
                    -   A1      |  |——————+——————————————+
                    - --------->|  |      ▩              ▩    
                    -   A2      |  |    (0,0)   ...   (0,7)
                    - --------->|  |    
                    -           |  |——————+——————————————+
                    -   ...     |  |      ▩              ▩
                    -           |  |    (1,0)   ...   (1,7)    
                    -   An-1    |  |    
                    - --------->|  |    
                    -   An      |  |         ... ...           16 x 8 矩阵
                    - --------->|  |    
                    -           |  |——————+——————————————+
                    -           |__|      ▩              ▩
                    -                   (15,0)    ...   (15,7)
                    -                     |              |
                    -                     |      ...     |
                    -              _______|______________|_______ 
                    -             |______________________________|    Address Decoder
                    -                  |     |   ...  |     |  
                    -                  |     |        |     |  
                    -
                    > 增加地址译码器进行译码, 分散重合片选线布局 
                    > 如 20 个地址信号在这种方式下译码后因为被分散, 所以使用 2 ^ 10 (1024) 根片选线即可
        > 随机存取存储器 (RAM)
            - 静态RAM (SRAM)
                > 基本单元电路 (存储器中用于寄存 0 和 1 代码的电路称为存储器的电路)
                    - 电路中由 MOS 管组成 触发器基本电路
                    - 触发器基本电路 结合信号控制的 MOS 管电路构成一个基本单元电路
                > 易失性半导体存储器 静态RAM用触发器电路工作原理存储信息, 因此断电后信息丢失
                - 熟悉静态RAM基本电路及读写时序流程
                - 注意读写操作后都有一段 滞后时间 以保证数据准确可靠
            - 动态RAM (DRAM)
                - 基本单元电路 (三管式, 单管式；均由 MOS 管组成)
                    - 靠电容存储电荷的原理来寄存信息(有电荷为 1, 无电荷为 0)
                    - 再生/刷新  电容上的电荷一般只能维持1～2ms, 因此必须在 2 ms 内对所有单元恢复一次原状态
                    - 0 和 1 实际上表示对电容进行 放电 和 充电
                    > 保存的信号与读出的信号是相反的 (如存 1 读出的是 0, 可以在读出电路增加非门来纠正)
                > 比静态RAM集成度更高, 功耗更低
                - 单管式静态RAM中存在读放大器, 用于将读信号反转, 写信号也会被反转
                > 动态刷新
                    - 只与行地址有关, 每次刷新一整行 (与列无关)
                    > 集中刷新
                        - 存取周期为 0.5 us, 以 128 x 128 为例, 且必须在 2ms 内刷新, 即 2000 us
                        - 128 * 0.5 = 64 us 一个刷新周期内需要 64 us 对所有电容元件进行信号再生/刷新
                        - 2000 - 64 = 1936 us 剩余 1936 us 维持信号或读/写
                        - 死区 = 64 us (刷新期间无法对外提供读写操作)
                        - 死时间率 = 128 / 4000 x 100% = 3.2%
                        - 0.5 * 2 = 1 us,  1 us 内有两个存取周期, 2000 us * 2 = 4000 个周期
                        - 64 * 2 = 128 个周期
                    > 分散刷新
                        - 存取周期为 1 us, 每次读写操作之后就进行一行刷新；以 128 x 128 为例
                        - 故存取周期 1 us = 读写周期 0.5 us + 刷新周期 0.5 us
                        - 128 us 内即可刷新全部电容元件, 而 2 ms / 128 us = 15.625 次
                        - 频率过高没有必要, 造成不必要的性能浪费
                        - 分散刷新无死区, 但存取周期变长, 效率变低
                    > 异步刷新 (集中分散相结合)
                        - 存取周期为 0.5 us
                        - 2 ms / 128 us = 15.625 us
                        - 在 2 ms 内每一个 15.625 都分配一行电容元件进行刷新
                        - 这种方式每行电荷元件就是每隔 2 ms 刷新一次, 不造成浪费
                        - 死区为 0.5 us (但若将刷新安排在指令译码阶段或其他空闲时期, 可以消除死区)
            > 动静RAM对比
                - 
                -          DRAM     SRAM
                - ----------------------------
                - 存储原理  电容     触发器
                -
                - 集成度    高       低
                -
                - 芯片引脚  少       多
                -
                - 功耗      低       高
                -
                - 价格      低       高
                - 
                - 速度      慢       快
                - 
                - 刷新      有       无
                - ---------------------------
                - 
                > DRAM 多用于主存, 如内存条
                > SRAM 价格贵, 功耗高, 多用于 CPU 缓存 Cache
        > 只读存储器 (ROM)
            - 发展历程
                - 早期只读存储器由厂家制作并在出品前写好内容
                - 改进  用户可以自行写, 一次性
                - 改进  可以多次写, 可进行擦除 (需额外购买设备)
                - 改进  电可擦写, 仍需特定设备
                - 改进  电可擦写, 直接连接到计算机进行擦写
            > 掩模 ROM (MROM)  
                - 早期由厂家制作出品写好的只读存储器
                - 行列选择线交叉处有 MOS 管为 1, 无为 0
            > PROM 一次性编程
                - 由双极型电路和熔丝构成
                - 熔丝断为 1, 未断为 0
                - 熔丝断后无法修复, 破坏性编程
            > EPROM 多次性编程
                - 可擦除可编程只读存储器, 允许任意次的改写
                - N 型沟道浮动栅 MOS 电路
                - D 端加正压形成浮动栅, S 源与 D 漏不导通表示 0 ；
                - D 端不加正电压, 不形成浮动栅, S 源与 D 漏导通则为 1
                - 使用紫外线照射时改变浮动栅, 完成擦除
            > EEPROM  多次性编程
                - 电可擦写, 局部擦写, 全部擦写
            > Flash Memory 闪速型存储器
                - EPROM   价格便宜, 集成度高
                - EEPROM  电可擦洗重写
                > 比EEPROM 要快
        ▲ 存储器与 CPU 的连接
            > 存储器容量的扩展
                ▲ 通常高位地址线会具备片选功能
                ▲ 存储器中的芯片片区都需要分配对应指定范围地址
                - 位扩展 (用 1K x 4 位存储芯片组成 1K x 8 位的存储器)
                    > 地址线 10 根, 1k = 2^10 
                    > 数据线 8 根, 8 位存储器
                    > 芯片数量 2 个, 4 x 2 = 8 位
                    ▲ 片选线 1 根
                    > 读写线 1 根
                    - 效果图
                        - ________________________________________________________   A0
                        - _____|____________________________|_____________________   A1
                        - _____||___________________________||____________________   A2
                        -      |||            ... ...       |||      
                        - _____|||__________________________|||___________________   A8
                        - _____|||_____|____________________|||_____|_____________   A9
                        -      ||| ... ||                   ||| ... ||
                        -    __|||_____||__               __|||_____||__
                        -   |              |             |              |
                        -   |              |_ _ _        |              |_ _ _
                        -   |              |_ _  |       |              |_ _  |
                        -   |              |   | |       |              |   | |
                        -   |______________|   | |       |______________|   | |
                        - _____|__|__|__|______|_|__________|__|__|__|______|_|___   D0
                        - ________|__|__|______|_|__________|__|__|__|______|_|___   D1
                        - ___________|__|______|_|__________|__|__|__|______|_|___   D2
                        - ______________|______|_|__________|__|__|__|______|_|___   D3
                        - _____________________|_|__________|__|__|__|______|_|___   D4
                        - _____________________|_|_____________|__|__|______|_|___   D5
                        - _____________________|_|________________|__|______|_|___   D6
                        - _____________________|_|___________________|______|_|___   D7
                        - _ _ _ _ _ _ _ _ _ _ _|_|_ _ _ _ _ _ _ _ _ _ _ _ _ |_|_ _   CS (片选线)
                        - _ _ _ _ _ _ _ _ _ _ _|_|_ _ _ _ _ _ _ _ _ _ _ _ _ |_|_ _   WE (读写信号)
                        -
                - 字扩展 (用 1K x 8 位存储芯片组成 2K x 8 位的存储器)
                    ▲ 侧重关注扩展后芯片对应地址的分配
                    > 地址线 11 根,  2k = 2^11
                    > 数据线 8 根,  8 位存储器
                    > 芯片数量 2 个, 1k x 2 = 2k
                    ▲ 片选线 1 根 (下图中的 A10 作为片选线)
                        - 2k 容量的存储器中, 0～1k - 1 地址分配到第 1 个芯片中
                        - 1k～2k - 1 地址则对应第 2 个芯片
                        - 只有在第 2 个芯片中才使用到 A10 地址线
                        - 故在 A10 地址线上取反信号即可控制片区选择
                    > 读写线 1 根
                    > 效果图
                        - 
                        -                                       取反信号 (用一根线即可区分目标片区)
                        -                                        ___
                        - ______________________________________|_1_|.____________   A10 (作为地址线和片选线)
                        - _____________________|____________________________|_____   A9
                        - _____|_______________|____________|_______________|_____   A8
                        - _____||______________|____________||______________|_____   A7
                        -      |||             |  ... ...   |||             |
                        - _____|||_____________|____________|||_____________|_____   A1
                        - _____|||_____|_______|____________|||_____|_______|_____   A0
                        -      ||| ... ||      |            ||| ... ||      |
                        -    __|||_____||__    |          __|||_____||__    |
                        -   |              |   |         |              |   |
                        -   |              |_ _|         |              |_ _|
                        -   |              |_ _          |              |_ _   
                        -   |              |   |         |              |   |  
                        -   |______________|   |         |______________|   |  
                        - _____|__|__|__|______|____________|__|__|__|______|_____   D0
                        - ________|__|__|______|____________|__|__|__|______|_____   D1
                        - ___________|__|______|____________|__|__|__|______|_____   D2
                        - ______________|______|____________|__|__|__|______|_____   D3
                        - _____________________|____________|__|__|__|______|_____   D4
                        - _____________________|_______________|__|__|______|_____   D5
                        - _____________________|__________________|__|______|_____   D6
                        - _____________________|_____________________|______|_____   D7
                        - _ _ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ |_ _ _   WE (读写信号)
                - 字位扩展 (用 1K x 4 位存储器组成 4K x 8 位的存储器)
                    > 地址线 12 根,  4k = 2^12
                    > 数据线 8 根, 8 位存储器
                    > 芯片数量 8 个,  1k x 4 = 4k, 4b x 2 = 8b, 4 x 2 = 8 个
                    ▲ 片选线 1 根
                    > 读写线 1 根
                    > 效果图 (太大不画)
            > 与 CPU 的连接
                - 步骤  地址线的连接, 数据线的连接, 读写命令线的连接, 片选线的连接, 合理选择存储芯片
                ▲ 例题 4.1
                    - CPU 有 16 根地址线, 8 根数据线
                    - 主存地址空间分配  6000H～67FFH 为系统程序区, 6800H～6BFFH为用户程序区
                    - 芯片提供  1k x 4 位 RAM, 4k x 8 位 RAM, 8k x 8 位 RAM, 2k x 8 位 ROM, 4k x 8 位 ROM, 8k x 8 位 ROM
                    > 6000H 中 H 终止符, 不纳入地址计算
                    > 系统和用户程序区根据需求不同分别使用 ROM 和 RAM 存储
                    > 系统程序区地址范围  6000(16) = 24576(10), 67FF(16) = 26623(10)
                        - 26623 - 24576 = 2047, 2^11 = 2048 
                        - 故选择 2k x 8 位 ROM
                    > 用户程序区地址范围  6800(16) = 26624(10), 6BFF(16) = 27647(10)
                        - 27647 - 26624 = 1023, 2^10 = 1024 
                        - 选择 1k 地址线的芯片, 而数据线有 8 根, 规格 1k 的只有 1k x 4 位
                        - 故选择 2 片 1k x 4 位 RAM
                    > 详情查看 Kami 下 pocc.pdf 中的课本例题笔记
                    ▲ 解决步骤
                        - 写出对应地址的二进制地址码
                        - 确定芯片的数量及类型
                        - 分配地址线
                        - 确定片选信号
                        - 确定片选逻辑
        > 存储器的校验
            > 编码的检测和纠错能力取决于 任意两组合法代码之间二进制位的最少差异数
                > L - 1 = D + C (D >= C)
                - L  编码的最小距离  (L=3)
                - D  检测错误的位数  (D=1)
                - C  纠正错误的位数  (C=1)
            > 汉明码
                - 采用奇偶校验, 分组校验 (非划分分组方式, 存储位之间有重叠)
                > 编码过程
                    > 配奇原则即配偶的 C1 取反即可.
                    > 按配偶原则配置 0011 的汉明码
                        - n = 4, 2^k >= n + k + 1, => k = 3 (分 3 组)
                        - 二进制序号  1  2  3  4  5  6  7
                        - 名称       C1 C2  0 C4  0  1  1
                        - C1 = 3 ⊕ 5 ⊕ 7 = 1
                        - C2 = 3 ⊕ 6 ⊕ 7 = 0
                        - C4 = 5 ⊕ 6 ⊕ 7 = 0
                > 纠错过程
                    > 已知接收到的汉明码为 0 1 0 0 1 1 1
                        - P1 = 1 ⊕ 3 ⊕ 5 ⊕ 7 = 0    
                        - P2 = 2 ⊕ 3 ⊕ 6 ⊕ 7 = 1    x
                        - P4 = 4 ⊕ 5 ⊕ 6 ⊕ 7 = 1    x
                        > P2 P4 出错, 说明两组公共区域出错, 即 6 / 7
                        > 但若 7 出错 P1 也应该出错, 故定位错误编码在于 6
                        > 纠正为 0 1 0 0 1 0 1, 传送的信息为 0 1 0 1
                    > 若出错位是校验位(1 2 4)则可不纠正, 保证数据位正确即可
        > 提高访存速度的措施
        - 采用高速器件, 采用层次结构 Cache-主存, 调整主存结构
        - 单体多字系统
            - 增加存储器带宽, 在一个存取周期内存取多条指令, 提高单体存储器的工作速度
            - 弊端  存储低字节数据时容易产生冗余或出错；指令不连续存放或遇到跳转指令时效率不高
        - 多体并行系统
            - 高位交叉, 顺序编址 (体号 | 体内地址)
                - 高位作为体内地址选择存储器内的存储体, 低位作为存储体内的明确地址
                - 弊端  容易造成存储器内某个存储体繁忙而其他存储体空闲；只适合提高容量不适合提高带宽
            - 低位交叉, 各个体轮流编址 (体内地址 | 体号)
                - 低位地址按序分配在各个存储体内, 运行时可被均衡并行访问各存储体
                - 不改变存储周期情况下提高主存储器带宽
        - 高性能存储芯片    
            - SDRAM (同步 DRAM)  在系统时钟控制下进行读出和写入；CPU 无须等待
            - RDRAM (Rambus DRAM)  由 Rambus 开发, 主要解决存储器带宽问题
            - CDRAM (Cache DRAM)  带 Cache 的 DRAM
    
    ▲ 高速缓冲存储器 (Cache)
        - Cache 耦合 CPU 和主存 (DRAM) 之间的速度差异, 解决 CPU 空等现象
        - 容量小, 速度高
        > 局部性原理  由于指令和数据在主存中地址分布不是随机的, 而是相对的簇聚, 使得 CPU 在执行时访存具有相对的局部性
        ▲ 命中率  CPU 访问的信息已在 Cache 内的比率 (以下公式为 同时 访问主存和Cache时应用)
            > 命中率 h = Nc / (Nc + Nm)  越接近 1 效率越好
                - Nc  访问 Cache 的总命中次数
                - Nm  访问 Memory(主存)的总次数 
            > Cache-主存平均访问时间 ta = h·tc + (1 - h)·tm
                - tm  Time Memory
                > 当访问 Cache 数据不存在再去查找主存时 ta = tc + (1 - h)·tm 即每次都会先访问 Cache 
            > 访问效率 e = tc / ta x 100% = tc / [h·tc + (1 - h)·tm] x 100%
                - tc  Time Cache
                - ta  Time Average
        > 命中率与 Cache 的 容量 及 块长 相关
            - 若 Cache 容量和主存一样大小, 则除了第一次需要访问主存之外, 后续所有数据都可以在 Cache 中命中
            > 块长  每个字块中字的容量大小
                - 若块长过小, 则执行少量指令之后便需要重新获取后续指令, 过于频繁访问 Cache 或主存, 无法充分利用局部性原理
                - 由于 Cache 容量有限, 块长过大时 Cache 的字块数量就少, 在 CPU 获取指令数据时可能一个块内有用部分不多, 占 Cache 空间且造成大量冗余 
        > 基本结构  主要由 Cache 存储体、地址映射变换机构、Cache 替换机构组成
            - Cache 存储体
                - 以块为单位与主存交换信息, 为加速 Cache 与主存之间的调动, 主存大多采用多体结构
                - Cache 访存优先级最高
            - 地址映射变换机构
                - 将 CPU 送来的主存地址转换为 Cache 地址
                - 若转换后的地址命中 Cache, 则直接访问 Cache 存储体
                - 若未命中, 不仅需要将字从主存取出, 同时将字所在的主存块一并调入 Cache 中
                - 若 Cache 未满, 则直接调入主存块
                - 若 Cache 已满, 则无法直接调入 Cache 内, 此时需要采用替换策略
            - 替换机构
                - 当 Cache 内容已满, 无法接受来自主存块的信息时
                - 由 Cache 内的替换机构按一定的替换算法来确定如何进行替换
                - 主存块调入 Cache 的任务过程全部由机器硬件自动完成
            > 读操作
                - 读操作相对简单, 当 CPU 访问主存地址后判断该存储字是否在 Cache 内
                - 若命中, 则直接访问 Cache
                - 若未命中,  则访问主存并将该字块从主存中调入 Cache
            > 写操作
                - 必须保证写入到 Cache 中与主存中的内容保持一致
                > 写直达法 (Write-through 存直达法 Store-through)
                    - 写操作时数据既写入 Cache 又写入主存中
                    - 可以保证 Cache 与主存内容始终一致
                    - 增加了访存次数和访问主存时间
                    - 若 CPU 运算期间存在多次写操作, 需要对主存进行频繁的写操作
                > 写回法 (Write-back 拷贝法 Copy-back)
                    - 写操作时仅把数据写入 Cache 中 (即此时对应主存块内的数据为脏数据)
                    - 当 Cache 被替换出去时将新数据写回主存
                    - 为了在被替换时识别内容是否已被修改, Cache 中每一块都要额外增加标志位进行标识
                    > 标志位  
                        - 清  未被修改, 内容与主存一致
                        - 浊  已被修改, 替换时需写回主存, 写回后重置标志位为 清
                    - 若 CPU 运算期间存在多次写操作, 相对于写直达法可以减少对主存的写操作次数
                > Cache一致性问题  
                    - 对于多个处理器系统, 各个处理器都有各自独立的 Cache, 且都共享内存
                    - 当一个缓存中数据被修改时, 需要同步到其他所有的 Cache 以及保证主存数据一致
                    - 上述两种方法不再能够解决这个问题, 需要改进
        > Cache 的改进 (Cache 的分级)
            - 单一缓存 (片内/载缓存)
                - 在 CPU 与主存之间只设一个缓存, 随着技术提高将这种缓存直接与 CPU 制作在同一芯片上 
                - 可以提高外部总线利用率及存取速度
                - 容量受芯片限制不会很大, 故命中率可能不高从而需要通过系统总线访问主存, 导致整体性能下降
            - 两级缓存　(片外缓存)
                - 在主存与片内缓存之间再增加一层缓存
                - 由比主存动态 RAM 和 ROM 存取速度更快的静态 RAM 组成
                - 使用独立的数据路径, 以减轻系统总线负担
                - 片内缓存(第一级)与片外缓存(第二级)组成两级缓存
            - 统一缓存 和 分立缓存
                - 统一缓存  指令和数据都存放在同一缓存内的 Cache
                - 分立缓存  指令和数据分别存放在各自的 Cache (指令 Cache 与 数据 Cache)
                - 两种方式选用考虑方案
                    - 主存结构相关  
                        - 若主存的指令数据是统一存放, 缓存也应使用统一缓存
                        - 反之则选择分立缓存
                    - 机器指令控制方式
                        - 采用超前控制或流水线控制方式时, 选用分立缓存
                            - 超前控制  当前指令执行尚未结束就提前取出下一条待执行指令
                            - 流水线控制  多条指令同时执行
        ▲ Cache-主存地址映射
            - 地址映射  主存地址映射到 Cache 地址的行为
            > 直接映射 (固定映射关系)
                - 主存中每一个主存块都只与一个缓存块对应
                > 主存地址  [ 主存字块标记 | Cache 字块地址 | 字块内地址 ]
                    - t位  主存字块标记
                    - c位  Cache 字块标记
                    - m位  主存字块标记 + Cache 字块标记 = t + c  
                > Cache 中标记位 = 主存字块标记 t 位
                > 映射关系(取模) i = j mod C 或 i = j mod 2^c
                    - i  缓存块号
                    - j  主存块号
                    - C  缓存块数
                > 工作原理
                    - 当缓存接收到 CPU 送来的主存地址后, 只需对比 c 位与 t 位是否相符
                    - 若符合且有效位为 1, 则表示该 Cache 字块已和主存中某字块建立了对应关系(已命中)
                    - 若不符合或有效位为 0, 则从主存读入新字块替换旧字块, 同时将信息送往 CPU 并修改 Cache 有效位标记
                > 缺点
                    - 每个主存块只能固定对应某个缓存块, 不够灵活, 即使缓存内还有空余也不能占用
                    - 若程序恰好要重复访问对应同一缓存位置的不同主存块, 则需要不停的切换字块, 降低命中率
            > 全相联映射
                - 允许主存中每一个字块映射到 Cache 中的任何一块位置上
                - 方式灵活, 命中率也高, 缩小了块冲突率
                > 主存地址  [ 主存字块标记 | 字块内地址 ]
                    - m位  主存字块标记 = t + c
                > Cache 中标记位 = 主存字块标记 t + c 位 (增加了 Cache 标记位数)
                > 工作原理  访问 Cache 时主存字块标记需和所有 Cache 标记进行比较才可确定是否命中
                > 缺点  所需逻辑电路较多, 成本较高, 实际应用时需采取更多措施来减少地址的比较次数
            > 组相联映射 
                - 直接映射与全相联映射的折中方案
                - 主存地址  [ 主存字块标记 | 组地址 | 字块内地址 ]
                    - s位  主存字块标记 = t + r 位
                    - q位  组地址 = c - r 位
                    - m位  主存字块标记 + 组地址 = s + q 位
            ▲ 实践
                - 主存 512K x 16 位, Cache 4K x 16 位, 块长为 4 个 16 位的字, 访存地址为字地址
                > 访存地址为字地址  说明每次取一整个字块出来, 无需更加细分取块内的哪个字 
                > 直接映射
                    - 主存地址  512K = 2^10 x 2^9 = 19 位
                    - Cache地址  4K = 2^10 x 2^2 = 12 位
                    - 主存字块标记  19 - 12 = 7 位
                    - 块内地址 4 字 = 2 位 (因为访存地址为字地址)
                    - 主存地址格式  [ 7 | 10 | 2 ]
                > 全相联映射
                    - 主存地址格式  [ 17 | 2 ]
                > 组相联映射(二路)
                    - 每组 2 个字块, Cache 共有 4K / 4 = 1024 个字块
                    - 组地址 9 位  1024 / 2 = 512 = 2^9
                    - 主存字块标记 19 - 9 - 2 = 8 位
                    - 主存地址格式  [ 8 | 9 | 2 ]
        > 替换算法
            - 先进先出算法 (FIFO First-In-First-Out)
            - 近期最少使用算法 (LRU Least-Recently-Used)
            - 随机算法

> IO设备
    > 发展阶段
        - 早期阶段
            - IO 与 主存 交换信息都必须通过 CPU
            - 每个 IO 设备都必须配有一套独立的逻辑电路与 CPU 相连, 线路十分散乱庞杂
            - 输入输出过程在 CPU 执行程序之中进行, 串行方式工作浪费时间
            - IO 设备的逻辑控制电路与 CPU 控制器紧密链接, 相互依赖, 难以对 IO 设备进行增/撤/更换
        - 接口模块和 DMA 阶段
            - IO 设备通过总线上的接口模块与主机进行链接
            - 可实现简单的并行工作, 但 CPU 在交换信息时需要中断现行程序, 不能做到绝对的并行
            - 直接存储器存取 (DMA Direct Memory Access)
                - IO 设备与主存之间设有一条直接数据通路, 与主存直接交换数据
                - CPU 还是如以前一样只与主存进行数据处理, 不影响 CPU 持续运行
        - 具有通道结构的阶段
            - 小型和微型计算机中可以采用 DMA 方式实现高速 IO 设备与主机之间成组数据交换
            - 但在大中型计算机中 IO 设备配置繁多, 数据传送频繁, 不适合继续采用 DMA 方式
                - 若每台 IO 设备都采用 DMA 接口, 不仅增加硬件成本, 难以解决众多 DMA 同时访问主存的冲突问题
                - CPU 需要额外对众多 DMA 接口进行管理, 频繁挪用 CPU 运行周期影响工作效率
            - 通道  
                - 用来负责管理 IO 设备以及实现主存与 IO 之间交换信息的部件, 可视为具有特殊功能的处理器
                - 具备专用的通道指令, 可独立执行通道指令构成的输入输出程序
                - 不是一个完全独立的处理器, 从属于 CPU 的专用处理器
        - IO 处理机阶段
            - IO 处理机  (外围处理机 Peripheral Processor)
            - 独立于主机工作, 可完成 IO 通道中的 IO 控制
            - 可完成码制转换, 格式处理, 数据块检错, 纠错等操作 
            - 具有 IO 处理机的输入输出系统与 CPU 工作的并行性更高
    > 输入输出系统的组成  
        - IO 软件  
            - 不同结构的输入输出系统软件技术差异很大
            - IO 指令  属于 CPU 指令的一部分 [ 操作码 | 命令码 | 设备码 ]
            - 通道指令(通道控制字 CCW Channel Control Word)
        - IO 硬件 
            - IO 设备编制方式
                - 统一编址   IO 设备地址作为内存地址的一部分, 用取数/存数指令
                - 不统一编址  需要专用的 IO 指令访问 IO 设备
            - 设备选址  通过 IO 指令中的设备码字段识别指定设备
            - 传送方式  串行, 并行
            - 联络方式  
                - 立即响应  适合工作简单的设备, 如 LED 灯
                - 异步工作  采用应答信号
                    - 并行  CPU 与 IO 接口之间是并行传输, 在 IO 接口与 IO 设备之间采用应答信号传输
                    - 串行  串行点平信号
                    - 同步  采用同步时表
            - 连接方式  辐射式, 总线式
            - IO 设备与主机信息传送的控制方式
                - 程序查询方式
                    - CPU 通过程序不断查询 IO 设备是否已做好准备
                    - IO 接口内需设置状态标记位
                    - 启动 IO 设备后CPU 需停止原来工作去不断查询 IO 设备状态, 工作效率不高
                    - CPU 将数据处理并送入主存完毕后再执行原来的程序
                - 程序中断方式
                    - CPU 不查询 IO 设备, 由 IO 设备在准备就绪后向 CPU 发送中断请求
                    - IO 设备需额外编写中断处理程序
                    - CPU 将数据处理并送入主存完毕后再执行原来的程序
                - DMA 方式
                    - 这种方式使得 CPU 在处理 IO 设备数据时无需停止原来的程序
                    - 主存与 IO 设备之间增加数据通路
                    - 若 DMA 与 CPU 同时访问主存, CPU 会将总线使用权让给 DMA
                    - DMA 执行存储时, CPU 仍然可以继续内部工作
    > IO 设备
        - 略

    > IO 接口
        - 概述
            - 指主机与 IO 设备之间设置的一个硬件电路及其相应的软件控制
            - 接口可实现数据缓冲, 匹配 CPU 速度
            - 接口可实现数据串-并格式的转换
            - 接口可实现电平转换
            - 接口可传送控制命令
            - 接口可监视设备工作状态, 供 CPU 查询
            - 端口  若干个端口加上相应的控制逻辑组成接口  
                - 接口电路中的一些寄存器, 这些寄存器分别用于存放数据信息, 控制信息和状态信息
                - 相应端口为数据端口, 控制端口和状态端口
        > 接口组成
            > 数据缓冲寄存器(DBR), 命令寄存器和命令译码器, 设备状态标记, 设备选择电路
            > 总线连接方式  每一台 IO 设备都通过 IO 接口挂载到系统总线上
            - 数据线
                - 通常双向, 也可以单向(需两组总线才可实现输入输出)
                - 根数 = 存储字长位数 或 字符位数
            - 设备选择线
                - 用于传送设备码
                - 根数 = IO 指令中设备码位数
                - 可以一组 或 两组(一组用于主机向 IO 设备发送设备码, 另一组用于 IO 设备向主机回送设备码)
            - 命令线
                - 传输 CPU 向设备发出的各种命令信号, 单向
                - 根数与命令信号多少相关
            - 状态线
                - 向 CPU 报告设备状态的信号线, 单向
        > 接口功能
            - 选址  每个 IO 接口都需要具备选址功能
            - 传送命令  IO 接口中需设置有存放命令的命令寄存器以及命令译码器, 用以响应 CPU 发出的命令
            - 传送数据  具备数据通路和数据传送功能, 还应具有缓冲能力(能将数据暂存在接口内)
            - 反映状态  接口内需设置反映 IO 设备工作状态的触发器
        > 接口类型
            - 按数据传送  并行接口和串行接口
            - 按功能选择  可编程接口和不可编程接口                 
            - 按通用性分类    通用接口和专用接口
            - 按数据传送的控制方式  程序型接口(用于速度较慢的设备)和 DMA 型接口(连接高速 IO 设备)

    > 程序查询方式
        > 核心问题  每时每刻需不断查询 IO 设备的状态
        > 设备较多时需按优先级逐级查询
        > 流程 
            - 检查状态标记, 若准备就绪, 开始交换数据, 交换完毕后结束流程
            - 若未就绪, 继续检查状态标记直至状态就绪
        > 流程指令
            - 测试指令  查询 IO 设备是否准备就绪
            - 传送指令  设备已就绪时, 执行传送指令
            - 转移指令  设备未就绪, 执行转移指令, 转至测试指令, 继续流程
        > 程序流程
            - 保护 CPU 寄存器内容 (这种传送方式需占用 CPU 中的寄存器, 故先保护原始内容)
            - 设置计数值 (设备数据批量大小)
            - 设置主存缓冲区首址
            - 启动 IO 设备
            - 测试就绪状态
            - 若就绪开始传送数据, 未就绪继续返回上一步测试就绪状态
                - 就绪  输入(接口电路中数据缓冲寄存器装满数据), 输出(接口电路中数据已被设备取走)
            - 传送完毕, 修改主存地址
            - 修改计数值 (一次数据传输完毕, 计数值为 0 时说明全部数据传送完毕)
            - 若全部数据传送完毕, 结束 IO 传送, 否则继续启动 IO 设备...
        - 
        
> 运算器